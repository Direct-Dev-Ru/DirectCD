apiVersion: v1
kind: ConfigMap
metadata:
  name: main-site
  namespace: test-app
  labels:
    app: main-site
data:
  IS_TLS: "false"
  NODE_ENV: "production"
  DEBUG: "HTTP:DDRU"
  POSTGRES_SECRETS: "{{ .PgSecrets }}"
  PGDATA: "/var/lib/postgresql/data/pgdata/"
  ASSETS_PATH: "/home/node/app/ext-data/assets/"
  DEFAULT_ASSETS_PATH: "/home/node/app/assets/"
  BASE_URL: "/"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: main-site
  namespace: test-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: main-site
  template:
    metadata:
      labels:
        app: main-site
        change_version: "{{ .Release }}"
    spec:
      containers:
        # memcached container
        - name: memcached
          image: memcached:1.6.9
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 256m
              memory: 512Mi

        # web app container
        - name: main-site
          image: "{{ .Image }}"
          envFrom:
            - configMapRef:
                name: main-site
          command:
            # - node
            # - "/home/node/app/bin/www.js"
            - yarn
            - prod
          readinessProbe:
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6085
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 15
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6085
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1024Mi"
              cpu: "1000m"
          ports:
            - containerPort: 6085
          imagePullPolicy: Always
          volumeMounts:
            - name: postgres-secrets
              mountPath: "{{ .PgSecrets }}"
              readOnly: true
            - name: site-data
              mountPath: /home/node/app/ext-data
              subPath: main
              readOnly: true
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            # allowPrivilegeEscalation: true
      # nodeSelector:
      #   kubernetes.io/hostname: srv-main
      volumes:
        - name: postgres-secrets
          secret:
            secretName: postgres-secrets
        - name: site-data
          hostPath:
            path: /mnt/k3snfs/sites
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: main-site
  namespace: test-app
spec:
  ports:
    - port: 6085
      targetPort: 6085
      name: tcp
  selector:
    app: main-site
